package bitvec_test

import (
	bitvec2 "bit-vector/bitvec"
	"fmt"
	"math/rand"
	"testing"
)

func TestNewBasicBitVec(t *testing.T) {
	str
	bitvec, _ := bitvec2.NewBasicBitVecFromString(str)
	bitArr, _ := bitvec2.NewBitArr(str)
	for i := 0; i < len(str); i++ {
		r1 := bitvec.Rank1(i)
		r2 := bitArr.Rank1(i)
		if r1 != r2 {
			t.Error("wrong")
		}
	}
	fmt.Println(bitvec.SizeOf())
}

func BenchmarkNewBasicBitVec(b *testing.B) {
	str
	bitvec, _ := bitvec2.NewBasicBitVecFromString(str)
	bitvec.Rank1(int(rand.Float64() * float64(len(str))))
}
